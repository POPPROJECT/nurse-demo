'use client';

import React, { useEffect, useMemo, useState } from 'react';
import Swal from 'sweetalert2';
import TableSearchBar from './TableSearchBar';
import TableDisplay from './TableDisplay';
import TablePagination from './TablePagination';
import { useAuth } from '@/app/contexts/AuthContext';

interface User {
  id: number;
  studentId: string;
  fullName: string;
  email: string;
  status: 'ENABLE' | 'DISABLE';
}

export default function EditStudentTable() {
  const { accessToken } = useAuth(); // ‚úÖ ‡πÉ‡∏ä‡πâ accessToken ‡∏à‡∏≤‡∏Å context
  const [users, setUsers] = useState<User[]>([]);
  const [search, setSearch] = useState('');
  const [sortBy, setSortBy] = useState<'fullName' | 'email' | 'studentId'>(
    'studentId'
  );
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [pageIndex, setPageIndex] = useState(0);
  const [perPage, setPerPage] = useState(10);
  const [page, setPage] = useState(1);

  useEffect(() => {
    const fetchInitialUsers = async () => {
      // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
      try {
        // üéØ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ
        // ‡∏ñ‡πâ‡∏≤ API ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Token ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏ô Header ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Axios Instance ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Interceptor ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ fetch ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏™‡πà credentials: 'include' ‡∏´‡∏£‡∏∑‡∏≠ Authorization header
        const res = await fetch(
          `${process.env.NEXT_PUBLIC_BACKEND_URL}/users?role=STUDENT`,
          {
            method: 'GET', // ‡∏£‡∏∞‡∏ö‡∏∏ method ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ GET ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô default)
            headers: accessToken
              ? { Authorization: `Bearer ${accessToken}` }
              : {}, // ‡∏™‡πà‡∏á Token ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            // credentials: 'include', // ‡πÉ‡∏ä‡πâ credentials ‡∏´‡∏£‡∏∑‡∏≠ Authorization header ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á
          }
        );

        if (!res.ok) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î Error (‡πÄ‡∏ä‡πà‡∏ô 401) ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Error ‡πÅ‡∏ï‡πà "‡∏´‡πâ‡∏≤‡∏°" Redirect
          const errorData = await res
            .json()
            .catch(() => ({ message: 'Failed to parse error response' }));
          console.error(
            'Error fetching students in EditStudentTable:',
            res.status,
            errorData
          );
          Swal.fire(
            '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            `‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Status: ${res.status}): ${
              errorData.message || 'Unknown error'
            }`,
            'error'
          );
          setUsers([]); // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ set ‡πÄ‡∏õ‡πá‡∏ô [] ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Error ‡πÉ‡∏ô UI
          return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
        }

        const data = await res.json();
        setUsers(
          data.map((u: any) => ({
            id: u.id,
            studentId: u.studentProfile?.studentId ?? '',
            fullName: u.name,
            email: u.email,
            status: u.status ?? 'ENABLED', // ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ENABLE ‡∏´‡∏£‡∏∑‡∏≠ DISABLE ‡∏ï‡∏≤‡∏° Enum
          }))
        );
      } catch (err) {
        console.error('Exception fetching students in EditStudentTable:', err);
        Swal.fire(
          '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
          'error'
        );
        setUsers([]);
      }
    };

    fetchInitialUsers();
  }, [accessToken]);

  const deleteUser = async (id: number) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ accessToken ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ AuthContext ‡∏´‡∏£‡∏∑‡∏≠ Prop)
    if (!accessToken) {
      // accessToken ‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô Component ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Context
      Swal.fire(
        '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        '‡πÑ‡∏°‡πà‡∏û‡∏ö Authentication Token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ Login ‡πÉ‡∏´‡∏°‡πà',
        'error'
      );
      return;
    }

    const confirm = await Swal.fire({
      title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?',
      text: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#3085d6',
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });

    if (!confirm.isConfirmed) return;

    try {
      const res = await fetch(
        `${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${id}`,
        {
          method: 'DELETE',
          headers: {
            Authorization: `Bearer ${accessToken}`, // ‚úÖ ‡∏™‡πà‡∏á Token ‡πÉ‡∏ô Header
            // 'Content-Type': 'application/json', // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DELETE ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ body
          },
          // credentials: 'include', // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á Token ‡πÉ‡∏ô Header
        }
      );

      if (!res.ok) {
        let errorMessage = '‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        try {
          const errorData = await res.json();
          errorMessage = errorData.message || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${res.status}`;
        } catch (e) {
          // ‡∏ñ‡πâ‡∏≤ response ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ parse
          errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${res.status} ${res.statusText}`;
        }
        throw new Error(errorMessage); // ‡πÇ‡∏¢‡∏ô Error ‡∏û‡∏£‡πâ‡∏≠‡∏° Message ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Backend
      }

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏ö user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state ‡πÉ‡∏ô UI
      setUsers((prev) => prev.filter((u) => u.id !== id)); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setUsers
      Swal.fire('‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } catch (err: any) {
      // ‡∏£‡∏±‡∏ö err ‡πÄ‡∏õ‡πá‡∏ô any ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á message
      console.error('Error deleting user:', err);
      Swal.fire(
        '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        err.message || '‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'error'
      );
    }
  };

  const filtered = useMemo(() => {
    const f = search.toLowerCase();
    return users.filter(
      (u) =>
        u.fullName.toLowerCase().includes(f) ||
        u.email.toLowerCase().includes(f)
    );
  }, [users, search]);

  const sorted = useMemo(() => {
    const arr = [...filtered];
    arr.sort((a, b) => {
      let va = a[sortBy];
      let vb = b[sortBy];

      if (sortBy === 'studentId') {
        // ‡∏ñ‡πâ‡∏≤ studentId ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô string ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        return sortOrder === 'asc'
          ? Number(va) - Number(vb)
          : Number(vb) - Number(va);
      }

      // fullName, email ‚Üí ‡πÉ‡∏ä‡πâ localeCompare
      const cmp = va.toLowerCase().localeCompare(vb.toLowerCase(), 'th', {
        numeric: true,
      });
      return sortOrder === 'asc' ? cmp : -cmp;
    });
    return arr;
  }, [filtered, sortBy, sortOrder]);

  const totalPages = Math.ceil(sorted.length / perPage) || 1;
  const paged = useMemo(() => {
    const start = pageIndex * perPage;
    return sorted.slice(start, start + perPage);
  }, [sorted, pageIndex, perPage]);

  const toggleSort = (col: 'fullName' | 'email') => {
    if (sortBy === col) {
      setSortOrder((o) => (o === 'asc' ? 'desc' : 'asc'));
    } else {
      setSortBy(col);
      setSortOrder('asc');
    }
    setPageIndex(0);
  };

  const getPageNumbers = () => {
    const pages: (number | '...')[] = [];
    const cur = pageIndex + 1;
    if (totalPages <= 5) {
      for (let i = 1; i <= totalPages; i++) pages.push(i);
    } else {
      pages.push(1);
      if (cur > 3) pages.push('...');
      for (
        let i = Math.max(2, cur - 1);
        i <= Math.min(totalPages - 1, cur + 1);
        i++
      )
        pages.push(i);
      if (cur < totalPages - 2) pages.push('...');
      pages.push(totalPages);
    }
    return pages;
  };

  return (
    <div className="space-y-6">
      <TableSearchBar
        search={search}
        setSearch={setSearch}
        perPage={perPage}
        setPerPage={(n) => {
          setPerPage(n);
          setPageIndex(0);
        }}
        setPage={(n) => {
          setPage(n);
          setPageIndex(n - 1);
        }}
        totalCount={users.length}
        filteredCount={filtered.length}
      />
      <TableDisplay data={paged} setData={setUsers} deleteUser={deleteUser} />
      <div className="text-sm text-gray-600 dark:text-gray-300">
        ‡πÅ‡∏™‡∏î‡∏á {paged.length} ‡∏à‡∏≤‡∏Å {filtered.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      </div>
      <TablePagination
        pageIndex={pageIndex}
        setPageIndex={setPageIndex}
        totalPages={totalPages}
        getPageNumbers={getPageNumbers}
      />
    </div>
  );
}
