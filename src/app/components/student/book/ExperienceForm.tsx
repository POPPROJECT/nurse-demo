"use client";

import { useRouter } from "next/navigation";
import { FormEvent, useEffect, useState } from "react";
import axios from "axios";
import Select from "react-select";
import Swal from "sweetalert2";

interface FieldConfig {
  id: number;
  label: string;
  type: "TEXT" | "NUMBER" | "DATE" | "SELECT" | "TEXTAREA";
  required: boolean;
  options?: string[];
}

interface SubCourseOption {
  value: string;
  label: string;
  isSubjectFreeform?: boolean; // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Flag
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö state 'summary' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
interface SummaryData {
  approverRole: string;
  approverName: string;
  course: string;
  subCourse: string;
  subject?: string; // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° subject ‡πÄ‡∏õ‡πá‡∏ô optional property
  fieldValues: { label: string; value: string }[];
}

type Option = {
  value: string;
  label: string;
};

export default function ExperienceForm({
  bookId,
  studentId,
  accessToken,
}: {
  bookId: number;
  studentId: number; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° type ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  accessToken: string;
}) {
  const router = useRouter();
  const BASE = process.env.NEXT_PUBLIC_BACKEND_URL!;
  const authHeader = { headers: { Authorization: `Bearer ${accessToken}` } };

  // --- Step state ---
  const [step, setStep] = useState<1 | 2>(1);

  // --- Step1 states ---
  const [fields, setFields] = useState<FieldConfig[]>([]);
  const [values, setValues] = useState<Record<number, string>>({});
  const [courses, setCourses] = useState<Option[]>([]);
  const [selectedCourse, setSelectedCourse] = useState<Option | null>(null);
  const [subCourses, setSubCourses] = useState<SubCourseOption[]>([]);
  const [selectedSubCourse, setSelectedSubCourse] =
    useState<SubCourseOption | null>(null);

  // [‡πÄ‡∏û‡∏¥‡πà‡∏°] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ subject ‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏Å‡∏£‡∏≠‡∏Å
  const [freeformSubject, setFreeformSubject] = useState("");

  const approverRoleOptions: Option[] = [
    { value: "APPROVER_IN", label: "‡∏ú‡∏π‡πâ‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô" },
    { value: "APPROVER_OUT", label: "‡∏ú‡∏π‡πâ‡∏ô‡∏¥‡πÄ‡∏ó‡∏®‡∏Å‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å" },
  ];
  const [selectedApproverRole, setSelectedApproverRole] =
    useState<Option | null>(null);
  const [approverOptions, setApproverOptions] = useState<Option[]>([]);
  const [selectedApproverName, setSelectedApproverName] =
    useState<Option | null>(null);

  // --- Summary data (Step2) ---
  const [summary, setSummary] = useState<SummaryData | null>(null);

  // --- Prevent double submit ---
  const [isSubmitting, setIsSubmitting] = useState(false);

  // 1. Load field config
  useEffect(() => {
    axios
      .get<FieldConfig[]>(
        `${BASE}/experience-books/${bookId}/fields`,
        authHeader,
      )
      .then((r) => setFields(r.data))
      .catch(() => Swal.fire("Error", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÑ‡∏î‡πâ", "error"));
  }, [BASE, bookId, accessToken]);

  // 2. Load courses
  useEffect(() => {
    axios
      .get<{ id: number; name: string }[]>(
        `${BASE}/experience-books/${bookId}/courses`,
        authHeader,
      )
      .then((r) =>
        setCourses(
          r.data
            .sort((a, b) =>
              a.name.localeCompare(b.name, "th", { numeric: true }),
            )
            .map((c) => ({ value: c.id.toString(), label: c.name })),
        ),
      )
      .catch(() => Swal.fire("Error", "‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error"));
  }, [BASE, bookId, accessToken]);

  // 3. Load subCourses
  useEffect(() => {
    setSelectedSubCourse(null);
    setFreeformSubject(""); // <-- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
    if (!selectedCourse) {
      setSubCourses([]);
      return;
    }
    axios
      .get<{ id: number; name: string; isSubjectFreeform: boolean }[]>(
        `${BASE}/courses/${selectedCourse.value}/subcourses`,
        authHeader,
      )
      .then((r) =>
        setSubCourses(
          r.data
            .sort((a, b) => a.name.localeCompare(b.name, "th")) // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            .map((s) => ({
              value: s.id.toString(),
              label: s.name,
              isSubjectFreeform: s.isSubjectFreeform,
            })),
        ),
      )
      .catch(() => Swal.fire("Error", "‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "error"));
  }, [selectedCourse, BASE, accessToken]);

  // 4. Load approvers by role
  useEffect(() => {
    setSelectedApproverName(null);
    if (!selectedApproverRole) {
      setApproverOptions([]);
      return;
    }
    axios
      .get<{ id: string; approverName: string }[]>(
        `${BASE}/approvers/by-role/${selectedApproverRole.value}`,
        authHeader,
      )
      .then((r) => {
        setApproverOptions(
          r.data.map((a) => ({ value: a.id, label: a.approverName })),
        );
      })
      .catch((err) => {
        Swal.fire(
          "Error",
          err.response?.status === 401
            ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            : "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          "error",
        ).then(() => err.response?.status === 401 && router.push("/"));
      });
  }, [selectedApproverRole, BASE, accessToken]);

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ fields
  const handleChange = (fieldId: number, v: string) =>
    setValues((prev) => ({ ...prev, [fieldId]: v }));

  // Step1: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° summary ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ Step2
  const goToSummary = (e: FormEvent) => {
    e.preventDefault();
    if (isSubmitting) return;
    // validations
    if (!selectedApproverRole)
      return Swal.fire("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô", "warning");
    if (!selectedApproverName)
      return Swal.fire("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô", "warning");
    if (!selectedCourse)
      return Swal.fire("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô", "warning");

    // build summary
    const fieldValues = fields.map((f) => ({
      label: f.label,
      value: values[f.id] || "-",
    }));

    const summaryData: SummaryData = {
      approverRole: selectedApproverRole!.label,
      approverName: selectedApproverName!.label,
      course: selectedCourse!.label,
      subCourse: selectedSubCourse?.label || "-",
      fieldValues,
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô subcourse ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• subject ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    if (selectedSubCourse?.isSubjectFreeform) {
      summaryData.subject = freeformSubject.trim() || "";
    }

    setSummary(summaryData);
    setStep(2);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ POST ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const postExperience = async () => {
    if (!summary) return;
    const payload = {
      bookId,
      studentId,
      approverRole: selectedApproverRole!.value,
      approverName: selectedApproverName!.label,
      course: summary.course,
      subCourse: summary.subCourse,
      subCourseId: Number(selectedSubCourse?.value), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ subject ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏≠‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      subject: selectedSubCourse?.isSubjectFreeform
        ? freeformSubject.trim() || null
        : null,
      fieldValues: fields.map((f) => ({
        fieldId: f.id,
        value: values[f.id] || "",
      })),
    };
    await axios.post(`${BASE}/student-experiences`, payload, authHeader);
  };

  // Step2: ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‚Üí POST ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö /student/books
  const finalize = async () => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    // ‡πÅ‡∏™‡∏î‡∏á Loader ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà await
    Swal.fire({
      title: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...",
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => Swal.showLoading(),
    });
    try {
      await postExperience();
      Swal.close();
      await Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ", "success");
      window.location.href = "/student/books";
    } catch {
      Swal.close();
      Swal.fire("Error", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ", "error");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Step2: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
  const cancelAll = () => {
    if (isSubmitting) return;
    Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å?",
      text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡πÉ‡∏ä‡πà ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      cancelButtonText: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
    }).then((res) => {
      if (res.isConfirmed) {
        window.location.href = "/student/books";
      }
    });
  };

  // Step2: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚Üí POST ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏° ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Step1
  const resetAndNew = async () => {
    if (isSubmitting) return;
    setIsSubmitting(true);
    Swal.fire({
      title: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà...",
      allowOutsideClick: false,
      showConfirmButton: false,
      didOpen: () => Swal.showLoading(),
    });
    try {
      await postExperience();
      Swal.close();
      await Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ", "success");
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏∏‡∏Å state ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      setValues({});
      setSelectedApproverRole(null);
      setSelectedApproverName(null);
      setSelectedCourse(null);
      setSelectedSubCourse(null);
      setSummary(null);
      setStep(1);
    } catch {
      Swal.close();
      Swal.fire(
        "Error",
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ",
        "error",
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return step === 1 ? (
    <form
      onSubmit={goToSummary}
      className="p-6 space-y-6 bg-white dark:bg-[#1E293B] dark:text-white rounded-xl shadow text-gray-800"
    >
      {/* Course */}
      <div>
        <label className="block mb-1 font-medium">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
        <Select
          instanceId="course-select"
          options={courses}
          value={selectedCourse}
          onChange={(opt) => setSelectedCourse(opt as Option)}
          placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà..."
          className="dark:text-gray-800 "
        />
      </div>

      {/* Sub-course */}
      <div>
        <label className="block mb-1 font-medium">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢</label>
        <Select
          instanceId="subcourse-select"
          options={subCourses}
          value={selectedSubCourse}
          onChange={(opt) => setSelectedSubCourse(opt as SubCourseOption)}
          isDisabled={!selectedCourse}
          placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢..."
          className="dark:text-gray-800 "
        />
      </div>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å Subject ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç */}
      {selectedSubCourse && selectedSubCourse.isSubjectFreeform && (
        <div className="flex flex-col">
          <label className="block mb-1 font-medium">
            ‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤ (‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡πá‡πÑ‡∏î‡πâ)
          </label>
          <input
            type="text"
            value={freeformSubject}
            onChange={(e) => setFreeformSubject(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded hover:border-gray-400 dark:bg-white dark:text-gray-800"
          />
        </div>
      )}

      {/* Dynamic Fields */}
      {fields.map((f) => (
        <div key={f.id} className="flex flex-col ">
          <label className="mb-1 font-medium ">
            {f.label}
            {f.required && <span className="text-red-500">*</span>}
          </label>
          {f.type === "TEXT" && (
            <input
              type="text"
              required={f.required}
              value={values[f.id] || ""}
              onChange={(e) => handleChange(f.id, e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded hover:border-gray-400 dark:bg-white dark:text-gray-800"
            />
          )}
          {f.type === "NUMBER" && (
            <input
              type="number"
              required={f.required}
              value={values[f.id] || ""}
              onChange={(e) => handleChange(f.id, e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded hover:border-gray-400 dark:bg-white dark:text-gray-800"
            />
          )}
          {f.type === "DATE" && (
            <input
              type="date"
              required={f.required}
              value={values[f.id] || ""}
              onChange={(e) => handleChange(f.id, e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded hover:border-gray-400 dark:bg-white dark:text-gray-800 "
            />
          )}
          {f.type === "TEXTAREA" && (
            <textarea
              required={f.required}
              value={values[f.id] || ""}
              onChange={(e) => handleChange(f.id, e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded hover:border-gray-400 dark:bg-white dark:text-gray-800"
            />
          )}
          {f.type === "SELECT" && (
            <Select
              // ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏°‡∏µ instanceId ‡πÄ‡∏û‡∏∑‡πà‡∏≠ accessibility
              instanceId={`field-${f.id}`}
              // ‡∏™‡∏£‡πâ‡∏≤‡∏á options ‡∏à‡∏≤‡∏Å f.options:string[]
              options={
                f.options?.map((opt) => ({ value: opt, label: opt })) || []
              }
              // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
              value={
                f.options
                  ? {
                      value: values[f.id] || "",
                      label: values[f.id] || "-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --",
                    }
                  : null
              }
              // ‡∏ñ‡πâ‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å ‡∏Å‡πá‡πÉ‡∏´‡πâ disable ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ value
              isClearable={!f.required}
              // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ required
              isDisabled={false}
              onChange={(opt) => {
                // opt ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ null ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤ clearable
                const v = opt ? (opt as { value: string }).value : "";
                handleChange(f.id, v);
              }}
              placeholder="-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --"
              className="react-select-container dark:text-gray-800"
              classNamePrefix="react-select"
            />
          )}
        </div>
      ))}

      {/* Approver Role */}
      <div>
        <label className="block mb-1 font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</label>
        <Select
          instanceId="approver-role-select"
          options={approverRoleOptions}
          value={selectedApproverRole}
          onChange={(opt) => setSelectedApproverRole(opt as Option)}
          placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥..."
          className="dark:text-gray-800 "
        />
      </div>

      {/* Approver Name */}
      <div>
        <label className="block mb-1 font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</label>
        <Select
          instanceId="approver-name-select"
          options={approverOptions}
          value={selectedApproverName}
          onChange={(opt) => setSelectedApproverName(opt as Option)}
          isDisabled={!selectedApproverRole}
          placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥..."
          className="dark:text-gray-800 "
        />
      </div>

      <button
        type="submit"
        disabled={isSubmitting}
        className="w-full py-2 text-white transition-colors bg-blue-600 rounded disabled:opacity-50 hover:bg-blue-700"
      >
        {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå"}
      </button>
    </form>
  ) : (
    <div className="p-6 space-y-4 bg-white dark:bg-[#1E293B] rounded-xl shadow dark:text-white ">
      <h2 className="text-xl font-semibold text-[#f46b45]">
        ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      </h2>
      <ul className="space-y-2 text-gray-800 dark:text-white">
        <li>
          <strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</strong> {summary?.course}
        </li>
        <li>
          <strong>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢:</strong> {summary?.subCourse}
        </li>
        {summary?.subject !== undefined && (
          <li>
            <strong>‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤:</strong> {summary.subject || ""}
          </li>
        )}
        {summary?.fieldValues.map((fv, i) => (
          <li key={i}>
            <strong>{fv.label}:</strong> {fv.value}
          </li>
        ))}
        <li>
          <strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:</strong> {summary?.approverRole}
        </li>
        <li>
          <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:</strong> {summary?.approverName}
        </li>
      </ul>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <button
          onClick={finalize}
          disabled={isSubmitting}
          className="py-2 text-white bg-green-600 rounded disabled:opacity-50 hover:bg-green-700"
        >
          {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"}
        </button>
        <button
          onClick={() => setStep(1)}
          disabled={isSubmitting}
          className="py-2 text-white bg-yellow-500 rounded disabled:opacity-50 hover:bg-yellow-600"
        >
          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        </button>
        <button
          onClick={resetAndNew}
          disabled={isSubmitting}
          className="py-2 text-white bg-blue-500 rounded disabled:opacity-50 hover:bg-blue-600"
        >
          {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£..." : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
        </button>
        <button
          onClick={cancelAll}
          disabled={isSubmitting}
          className="py-2 text-white bg-red-600 rounded disabled:opacity-50 hover:bg-red-700"
        >
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </button>
      </div>
    </div>
  );
}
